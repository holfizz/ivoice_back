import { PrismaService } from "@/prisma.service";
import { TelegramService } from "@/telegram/telegram.service";
import { Body, Controller, Inject, Post, forwardRef } from "@nestjs/common";
import { Type } from "class-transformer";
import { IsNumber, IsString, ValidateNested } from "class-validator";

class VoiceSettingsDto {
  @IsString()
  voiceId: string;

  @IsNumber()
  speed: number;

  @IsNumber()
  pitch: number;
}

class UpdateSettingsDto {
  @ValidateNested()
  @Type(() => VoiceSettingsDto)
  settings: VoiceSettingsDto;
}

@Controller("voice")
export class VoiceController {
  // –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –≥–æ–ª–æ—Å–æ–≤ –≤ –∏—Ö –∫–æ–¥—ã
  private readonly VOICE_CODES = {
    natalya: "Nec_24000", // –ù–∞—Ç–∞–ª—å—è (24 –∫–ì—Ü)
    boris: "Bys_24000", // –ë–æ—Ä–∏—Å (24 –∫–ì—Ü)
    marfa: "May_24000", // –ú–∞—Ä—Ñ–∞ (24 –∫–ì—Ü)
    alexandra: "Ost_24000", // –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ (24 –∫–ì—Ü)
    taras: "Tur_24000", // –¢–∞—Ä–∞—Å (24 –∫–ì—Ü)
    sergey: "Pon_24000", // –°–µ—Ä–≥–µ–π (24 –∫–ì—Ü)
    kira_eng: "Kin_24000", // Kira (24 –∫–ì—Ü) - English
  };

  // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –≥–æ–ª–æ—Å–æ–≤ –≤ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  private readonly VOICE_INFO = {
    Nec: { name: "–ù–∞—Ç–∞–ª—å—è", gender: "female", quality: { "24000": "Nec_24000", "8000": "Nec_8000" } },
    Bys: { name: "–ë–æ—Ä–∏—Å", gender: "male", quality: { "24000": "Bys_24000", "8000": "Bys_8000" } },
    May: { name: "–ú–∞—Ä—Ñ–∞", gender: "female", quality: { "24000": "May_24000", "8000": "May_8000" } },
    Ost: { name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", gender: "female", quality: { "24000": "Ost_24000", "8000": "Ost_8000" } },
    Tur: { name: "–¢–∞—Ä–∞—Å", gender: "male", quality: { "24000": "Tur_24000", "8000": "Tur_8000" } },
    Pon: { name: "–°–µ—Ä–≥–µ–π", gender: "male", quality: { "24000": "Pon_24000", "8000": "Pon_8000" } },
    Kin: { name: "Kira", gender: "female", quality: { "24000": "Kin_24000", "8000": "Kin_8000" } },
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≥–æ–ª–æ—Å–∞ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
  private getBestQualityVoiceCode(baseCode: string): string {
    const voicePrefix = baseCode.split("_")[0];
    const voiceInfo = this.VOICE_INFO[voicePrefix];
    return voiceInfo?.quality["24000"] || baseCode;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
  private isFemaleVoice(voiceCode: string): boolean {
    const voicePrefix = voiceCode.split("_")[0];
    return this.VOICE_INFO[voicePrefix]?.gender === "female" || false;
  }

  constructor(
    private readonly prisma: PrismaService,
    @Inject(forwardRef(() => TelegramService))
    private readonly telegramService: TelegramService,
  ) {}

  @Post("settings")
  async updateSettings(@Body() data: { userId: string; settings: VoiceSettingsDto }) {
    try {
      console.log("=== Voice Controller: Received request ===");
      console.log("userId:", data.userId);
      console.log("Original voice ID:", data.settings.voiceId);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –≥–æ–ª–æ—Å–∞ –≤ –∫–æ–¥ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      let voiceCode = this.VOICE_CODES[data.settings.voiceId.toLowerCase()] || data.settings.voiceId;
      voiceCode = this.getBestQualityVoiceCode(voiceCode);

      console.log("Mapped voice code:", voiceCode);
      console.log("Is female voice:", this.isFemaleVoice(voiceCode));

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await this.prisma.user.findFirst({
        where: { telegram_id: data.userId },
      });

      if (!user) {
        user = await this.prisma.user.create({
          data: {
            telegram_id: data.userId,
            state: "INITIAL",
            balance: 0,
          },
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –≥–æ–ª–æ—Å–∞
      if (!voiceCode.includes("_24000")) {
        console.error("Invalid voice ID format:", voiceCode);
        throw new Error("Invalid voice ID format");
      }

      // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º
      const updatedSettings = await this.prisma.voiceSettings.upsert({
        where: {
          userId: user.id,
        },
        create: {
          userId: user.id,
          voiceId: voiceCode,
          speed: data.settings.speed,
          pitch: 1.0,
        },
        update: {
          voiceId: voiceCode,
          speed: data.settings.speed,
          pitch: 1.0,
        },
      });
      console.log("Settings saved to database:", updatedSettings);

      const voicePrefix = voiceCode.split("_")[0];
      const voiceName = this.VOICE_INFO[voicePrefix]?.name || voiceCode;
      const voiceGender = this.VOICE_INFO[voicePrefix]?.gender === "female" ? "–∂–µ–Ω—Å–∫–∏–π" : "–º—É–∂—Å–∫–æ–π";

      const message =
        `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
        `üé§ –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: ${voiceName} (${voiceGender})\n` +
        `‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: ${data.settings.speed}x\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å.`;

      console.log("Sending message to Telegram:", message);
      await this.telegramService.sendMessage(data.userId, message);
      console.log("Message sent successfully");

      return { success: true, settings: updatedSettings };
    } catch (error) {
      console.error("Error in updateSettings:", error);
      throw error;
    }
  }
}
