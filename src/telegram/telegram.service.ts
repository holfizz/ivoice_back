import { PrismaService } from "@/prisma.service";
import { VoiceService } from "@/voice/voice.service";
import { Injectable } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { User, VoiceSettings } from "@prisma/client";
import { InjectBot } from "nestjs-telegraf";
import { Context, Telegraf } from "telegraf";
import { SYMBOL_PRICE } from "../constants";
import { TelegramServiceClient } from "./telegram.service.client";

interface VoiceSettingsUpdate {
  voiceId: string;
  speed: number;
  pitch?: number;
  volume?: number;
}

@Injectable()
export class TelegramService {
  private availableVoices = {
    ru: [
      { id: "Nec_24000", name: "–ù–∞—Ç–∞–ª—å—è", preview: "assets/natalya.wav" },
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–∞
      // { id: "Bys_24000", name: "–ë–æ—Ä–∏—Å" },
      // { id: "May_24000", name: "–ú–∞—Ä—Ñ–∞" },
    ],
    en: [
      // { id: "alex", name: "Alex" },
      // { id: "emma", name: "Emma" },
    ],
  };

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly prisma: PrismaService,
    private telegramClient: TelegramServiceClient,
    private configService: ConfigService,
    private voiceService: VoiceService,
  ) {}

  async handleStart(telegramId: string, chatId: string) {
    try {
      let user = await this.prisma.user.findFirst({
        where: { telegram_id: telegramId },
        include: { voiceSettings: true },
      });

      if (!user) {
        user = await this.prisma.user.create({
          data: {
            telegram_id: telegramId,
            state: "INITIAL",
            voiceSettings: {
              create: {
                voiceId: "Nec_24000",
                speed: 1.0,
                pitch: 1.0,
              },
            },
          },
          include: { voiceSettings: true },
        });
      }

      const webAppUrl = `${this.configService.get<string>("WEBAPP_URL")}?userId=${telegramId}`;
      const keyboard = {
        keyboard: [
          [
            {
              text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞",
              web_app: { url: webAppUrl },
            },
          ],
          [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" }],
          [{ text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å" }],
        ],
        resize_keyboard: true,
        persistent: true,
      };

      await this.sendMessageWithKeyboard(
        chatId,
        `üëã ${user ? "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!" : "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Text2Voice Bot!"}

üéØ –Ø –ø–æ–º–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏—è—Ç–Ω—ã–º –≥–æ–ª–æ—Å–æ–º.

üí∞ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: ${user.balance.toFixed(2)} ‚ÇΩ
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${SYMBOL_PRICE} ‚ÇΩ –∑–∞ —Å–∏–º–≤–æ–ª

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –µ–≥–æ –æ–∑–≤—É—á—É!`,
        keyboard,
      );
    } catch (error) {
      console.error("Error in handleStart:", error);
      throw error;
    }
  }

  async handleText(chatId: string, text: string) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≥–æ–ª–æ—Å–∞
      const user = await this.prisma.user.findFirst({
        where: { telegram_id: chatId },
        include: { voiceSettings: true },
      });

      if (!user) {
        console.log("User not found:", chatId);
        return;
      }

      console.log("=== TelegramService: Processing text ===");
      console.log("User:", user.telegram_id);
      console.log("Voice settings:", user.voiceSettings);
      console.log("Text to process:", text);

      if (!user.voiceSettings) {
        // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await this.prisma.voiceSettings.create({
          data: {
            userId: user.id,
            voiceId: "Nec_24000",
            speed: 1.0,
            pitch: 1.0,
          },
        });
        return this.handleText(chatId, text);
      }

      const cost = text.length * SYMBOL_PRICE;

      if (user.balance < cost) {
        await this.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∑–≤—É—á–∫–∏: ${cost} —Ä—É–±.\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} —Ä—É–±.\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å: /balance`);
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
      console.log("Generating voice with settings:", user.voiceSettings);
      const audioBuffer = await this.voiceService.generateVoice(text, user.voiceSettings);

      await this.prisma.user.update({
        where: { telegram_id: chatId },
        data: { balance: user.balance - cost },
      });

      await this.telegramClient.sendVoice(chatId, audioBuffer, {
        caption: `üéØ –û–∑–≤—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ: ${cost} —Ä—É–±.\nüí≥ –û—Å—Ç–∞—Ç–æ–∫: ${(user.balance - cost).toFixed(2)} —Ä—É–±.`,
      });
    } catch (error) {
      console.error("Error handling text:", error);
      await this.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  private async getUserSettings(chatId: string): Promise<User & { voiceSettings: VoiceSettings | null }> {
    return await this.prisma.user.findFirstOrThrow({
      where: { telegram_id: chatId },
      include: { voiceSettings: true },
    });
  }

  async sendMessage(chatId: string, text: string): Promise<any> {
    console.log("TelegramService: Sending message");
    console.log("TelegramService: Chat ID:", chatId);
    console.log("TelegramService: Text:", text);

    try {
      const result = await this.bot.telegram.sendMessage(chatId, text);
      console.log("TelegramService: Message sent successfully:", result);
      return result;
    } catch (error) {
      console.error("TelegramService: Error sending message:", error);
      throw error;
    }
  }

  async sendMessageWithKeyboard(chatId: string, text: string, keyboard: any) {
    await this.telegramClient.sendMessageWithKeyboard(chatId, text, keyboard);
  }

  async handleCommand(chatId: string, text: string) {
    try {
      switch (text) {
        case "/settings": {
          const webAppUrl = this.configService.get<string>("WEBAPP_URL");
          const settingsKeyboard = {
            inline_keyboard: [
              [
                {
                  text: "‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                  web_app: { url: webAppUrl },
                },
              ],
            ],
          };

          await this.sendMessageWithKeyboard(chatId, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", settingsKeyboard);
          break;
        }
        case "/balance": {
          const user = await this.getUserSettings(chatId);
          const balanceKeyboard = {
            inline_keyboard: [
              [
                { text: "85 ‚ÇΩ", callback_data: "add_balance_85" },
                { text: "100 ‚ÇΩ", callback_data: "add_balance_100" },
                { text: "150 ‚ÇΩ", callback_data: "add_balance_150" },
              ],
              [
                { text: "200 ‚ÇΩ", callback_data: "add_balance_200" },
                { text: "500 ‚ÇΩ", callback_data: "add_balance_500" },
              ],
              [{ text: "üí∞ –°–≤–æ—è —Å—É–º–º–∞", callback_data: "custom_amount" }],
            ],
          };

          await this.sendMessageWithKeyboard(
            chatId,
            `üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\nüí° –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∑–≤—É—á–∫–∏: ${SYMBOL_PRICE} ‚ÇΩ/—Å–∏–º–≤–æ–ª\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚ÇΩ\n\n‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 85 ‚ÇΩ`,
            balanceKeyboard,
          );
          break;
        }
        case "/help":
          const helpUser = await this.getUserSettings(chatId);
          await this.sendMessage(
            chatId,
            `üéØ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å
2Ô∏è‚É£ –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${SYMBOL_PRICE} —Ä—É–±. –∑–∞ —Å–∏–º–≤–æ–ª
üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${helpUser.balance.toFixed(2)} —Ä—É–±.`,
          );
          break;
        default:
          await this.sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
      }
    } catch (error) {
      console.error("Error handling command:", error);
      throw error;
    }
  }

  async getUserBalance(chatId: string): Promise<string> {
    const user = await this.prisma.user.findFirst({
      where: { telegram_id: chatId },
      select: { balance: true },
    });

    return (user?.balance || 0).toFixed(2);
  }

  async updateVoiceSettings(chatId: string, settings: VoiceSettingsUpdate) {
    const user = await this.prisma.user.findFirst({
      where: { telegram_id: chatId },
      include: { voiceSettings: true },
    });

    if (!user) throw new Error("User not found");

    const voiceData = {
      voiceId: settings.voiceId || "Nec_24000",
      speed: settings.speed || 1.0,
    } as const;

    if (!user.voiceSettings) {
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
      await this.prisma.voiceSettings.create({
        data: {
          ...voiceData,
          userId: user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        },
      });
    } else {
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      await this.prisma.voiceSettings.update({
        where: { id: user.voiceSettings.id },
        data: voiceData,
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≥–æ–ª–æ—Å–æ–º
    const testText = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!";
    const audioBuffer = await this.voiceService.generateVoice(testText, {
      ...user.voiceSettings,
      ...voiceData,
    });

    await this.telegramClient.sendVoice(chatId, audioBuffer, {
      caption: "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í–æ—Ç –∫–∞–∫ –∑–≤—É—á–∏—Ç –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å:",
    });
  }

  async generateVoice(text: string, settings: VoiceSettings) {
    return await this.voiceService.generateVoice(text, settings);
  }

  async sendVoice(chatId: string, buffer: Buffer, extra?: any) {
    return await this.telegramClient.sendVoice(chatId, buffer, extra);
  }
}
