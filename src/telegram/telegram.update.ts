import { PrismaService } from "@/prisma.service";
import { Inject, forwardRef } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { Command, Ctx, Help, Message, On, Start, Update } from "nestjs-telegraf";
import { Context } from "telegraf";
import { SYMBOL_PRICE } from "../constants";
import { OrderService } from "../order/order.service";
import { TelegramService } from "./telegram.service";

const DEMO_TEXT = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.";

@Update()
export class TelegramUpdate {
  private userStates: Map<string, { action: string; amount?: number }> = new Map();

  constructor(
    private telegramService: TelegramService,
    @Inject(forwardRef(() => OrderService))
    private orderService: OrderService,
    private prisma: PrismaService,
    private configService: ConfigService,
  ) {}

  private async handleCommand(chatId: string, text: string) {
    await this.telegramService.handleCommand(chatId, text);
  }

  @Start()
  async start(@Ctx() ctx: Context) {
    try {
      if (!ctx.from) return;
      const telegramId = ctx.from.id.toString();
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      await this.telegramService.handleStart(telegramId, chatId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  @Help()
  async help(@Ctx() ctx: Context) {
    try {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      await this.telegramService.sendMessage(
        chatId,
        `üéØ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å
2Ô∏è‚É£ –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 0.01 —Ä—É–±. –∑–∞ —Å–∏–º–≤–æ–ª
üéÅ –ü—Ä–æ–±–Ω—ã–π –±–∞–ª–∞–Ω—Å: 10 —Ä—É–±.

‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
/balance - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`,
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  @On("text")
  async onText(@Ctx() ctx: Context) {
    try {
      if (!ctx.message || !("text" in ctx.message)) return;
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      const text = ctx.message.text;
      const userState = this.userStates.get(chatId);

      if (userState?.action === "WAITING_EMAIL") {
        const email = text.trim();
        if (!email.includes("@") || !email.includes(".")) {
          await this.telegramService.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
          return;
        }

        await this.prisma.user.update({
          where: { telegram_id: chatId },
          data: { email },
        });

        if (userState.amount) {
          const invoice = await this.orderService.createPaymentInvoice(chatId, userState.amount);
          await ctx.replyWithInvoice(invoice);
        }

        this.userStates.delete(chatId);
        return;
      }

      if (userState?.action === "WAITING_AMOUNT") {
        const amount = parseFloat(text);

        if (isNaN(amount) || amount < 85) {
          await this.telegramService.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 85 ‚ÇΩ");
          return;
        }

        if (amount > 25000) {
          await this.telegramService.sendMessage(chatId, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 25 000 ‚ÇΩ");
          return;
        }

        const user = await this.prisma.user.findFirst({
          where: { telegram_id: chatId },
          select: { email: true },
        });

        if (user?.email) {
          const invoice = await this.orderService.createPaymentInvoice(chatId, amount);
          await ctx.replyWithInvoice(invoice);
          this.userStates.delete(chatId);
        } else {
          this.userStates.set(chatId, { action: "WAITING_EMAIL", amount });
          await this.telegramService.sendMessage(chatId, "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:");
        }

        return;
      }

      switch (text) {
        case "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
          await this.handleCommand(chatId, "/balance");
          break;
        case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
          await this.handleCommand(chatId, "/help");
          break;
        default:
          if (text.startsWith("/")) {
            await this.handleCommand(chatId, text);
          } else {
            await this.telegramService.handleText(chatId, text);
          }
      }
    } catch (error) {
      console.error("Error handling text message:", error);
    }
  }

  @On("pre_checkout_query")
  async onPreCheckoutQuery(@Ctx() ctx: Context) {
    try {
      if (!ctx.preCheckoutQuery) return;

      await ctx.answerPreCheckoutQuery(true);
    } catch (error) {
      console.error("Error in pre_checkout_query:", error);
      await ctx.answerPreCheckoutQuery(false, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞");
    }
  }

  @On("successful_payment")
  async onSuccessfulPayment(@Ctx() ctx: Context) {
    try {
      if (!ctx.message || !("successful_payment" in ctx.message)) return;

      await this.orderService.handlePaymentSuccess(ctx.message.successful_payment);
    } catch (error) {
      console.error("Error in successful_payment:", error);
    }
  }

  @Command("balance")
  async onBalance(@Ctx() ctx: Context) {
    try {
      if (!ctx.message) return;
      const chatId = ctx.message.chat.id.toString();

      const keyboard = {
        inline_keyboard: [
          [
            { text: "85 ‚ÇΩ", callback_data: "add_balance_85" },
            { text: "100 ‚ÇΩ", callback_data: "add_balance_100" },
            { text: "150 ‚ÇΩ", callback_data: "add_balance_150" },
          ],
          [
            { text: "200 ‚ÇΩ", callback_data: "add_balance_200" },
            { text: "500 ‚ÇΩ", callback_data: "add_balance_500" },
          ],
          [{ text: "üí∞ –°–≤–æ—è —Å—É–º–º–∞", callback_data: "custom_amount" }],
        ],
      };

      await this.telegramService.sendMessageWithKeyboard(
        chatId,
        `üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

üí° –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∑–≤—É—á–∫–∏: ${SYMBOL_PRICE} ‚ÇΩ/—Å–∏–º–≤–æ–ª
üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${await this.telegramService.getUserBalance(chatId)} ‚ÇΩ

‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 85 ‚ÇΩ`,
        keyboard,
      );
    } catch (error) {
      console.error("Error in balance command:", error);
    }
  }

  @On("callback_query")
  async handleCallback(@Ctx() ctx: Context) {
    try {
      const callback = ctx.callbackQuery;
      const data = callback && "data" in callback ? callback.data : undefined;
      const chatId = callback?.from?.id?.toString();

      if (!chatId || !data) return;

      if (data === "custom_amount") {
        this.userStates.set(chatId, { action: "WAITING_AMOUNT" });
        await this.telegramService.sendMessage(chatId, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 85 ‚ÇΩ):");
        await ctx.answerCbQuery();
        return;
      }

      if (data.startsWith("add_balance_")) {
        const amount = parseInt(data.replace("add_balance_", ""));

        const user = await this.prisma.user.findFirst({
          where: { telegram_id: chatId },
          select: { email: true },
        });

        if (user?.email) {
          const invoice = await this.orderService.createPaymentInvoice(chatId, amount);
          await ctx.replyWithInvoice(invoice);
          this.userStates.delete(chatId);
        } else {
          this.userStates.set(chatId, { action: "WAITING_EMAIL", amount });
          await this.telegramService.sendMessage(chatId, "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:");
        }
      }

      await ctx.answerCbQuery();
    } catch (error) {
      console.error("Error in handleCallback:", error);
    }
  }

  @On("web_app_data")
  async onWebAppData(@Message() message: any) {
    console.log("Backend: Received web_app_data event");
    console.log("Backend: Raw message:", message);

    try {
      const data = JSON.parse(message.web_app_data.data);
      console.log("Backend: Parsed data:", data);

      const chatId = message.chat.id.toString();
      console.log("Backend: Chat ID:", chatId);

      if (data.type === "settings_updated") {
        console.log("Backend: Processing settings update");

        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const updatedSettings = await this.prisma.voiceSettings.upsert({
          where: {
            userId: chatId,
          },
          create: {
            userId: chatId,
            voiceId: data.settings.voiceId,
            speed: data.settings.speed,
            pitch: data.settings.pitch,
          },
          update: {
            voiceId: data.settings.voiceId,
            speed: data.settings.speed,
            pitch: data.settings.pitch,
          },
        });
        console.log("Backend: Settings saved:", updatedSettings);

        // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–µ
        const voiceName = await this.getVoiceName(data.settings.voiceId);
        console.log("Backend: Voice name:", voiceName);

        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const message =
          `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
          `üé§ –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: ${voiceName}\n` +
          `‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: ${data.settings.speed}x\n` +
          `üéµ –í—ã—Å–æ—Ç–∞: ${data.settings.pitch}x\n\n` +
          `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å.`;

        console.log("Backend: Sending message:", message);
        await this.telegramService.sendMessage(chatId, message);
        console.log("Backend: Message sent successfully");
      }
    } catch (error) {
      console.error("Backend: Error handling web app data:", error);
      if (error.response) {
        console.error("Backend: Error response:", error.response.data);
      }
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥–æ–ª–æ—Å–∞
  private getVoiceName(voiceId: string): string {
    const voices = {
      Nec_24000: "–ù–∞—Ç–∞–ª—å—è",
      Bys_24000: "–ë–æ—Ä–∏—Å",
      May_24000: "–ú–∞—Ä—Ñ–∞",
      Tur_24000: "–¢–∞—Ä–∞—Å",
      Ost_24000: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞",
      Pon_24000: "–°–µ—Ä–≥–µ–π",
    };
    return voices[voiceId] || voiceId;
  }

  @Command("demo")
  async onDemo(@Ctx() ctx: Context) {
    try {
      if (!ctx.message) return;
      const chatId = ctx.message.chat.id.toString();

      const user = await this.prisma.user.findFirst({
        where: { telegram_id: chatId },
        include: { voiceSettings: true },
      });

      if (!user) return;

      const audioBuffer = await this.telegramService.generateVoice(DEMO_TEXT, user.voiceSettings);
      await this.telegramService.sendVoice(chatId, audioBuffer, {
        caption: "üéØ –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç!",
      });
    } catch (error) {
      console.error("Error in demo command:", error);
    }
  }

  @Command("payment")
  async onPayment(@Ctx() ctx: Context) {
    try {
      if (!ctx.message) return;
      const chatId = ctx.message.chat.id.toString();

      const keyboard = {
        inline_keyboard: [
          [
            { text: "85 ‚ÇΩ", callback_data: "add_balance_85" },
            { text: "100 ‚ÇΩ", callback_data: "add_balance_100" },
            { text: "150 ‚ÇΩ", callback_data: "add_balance_150" },
          ],
          [
            { text: "200 ‚ÇΩ", callback_data: "add_balance_200" },
            { text: "500 ‚ÇΩ", callback_data: "add_balance_500" },
          ],
          [{ text: "üí∞ –°–≤–æ—è —Å—É–º–º–∞", callback_data: "custom_amount" }],
        ],
      };

      await this.telegramService.sendMessageWithKeyboard(
        chatId,
        `üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

üí° –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∑–≤—É—á–∫–∏: ${SYMBOL_PRICE} ‚ÇΩ/—Å–∏–º–≤–æ–ª
üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${await this.telegramService.getUserBalance(chatId)} ‚ÇΩ

‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 85 ‚ÇΩ`,
        keyboard,
      );
    } catch (error) {
      console.error("Error in payment command:", error);
    }
  }

  @Command("help")
  async onHelpCommand(@Ctx() ctx: Context) {
    try {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      const helpUser = await this.getUserSettings(chatId);
      await this.telegramService.sendMessage(
        chatId,
        `üéØ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å
2Ô∏è‚É£ –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${SYMBOL_PRICE} —Ä—É–±. –∑–∞ —Å–∏–º–≤–æ–ª
üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${helpUser.balance.toFixed(2)} —Ä—É–±.`,
      );
    } catch (error) {
      console.error("Error in help command:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  @Command("settings")
  async onSettingsCommand(@Ctx() ctx: Context) {
    try {
      if (!ctx.message) return;
      const chatId = ctx.message.chat.id.toString();

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å userId –≤ –ø—É—Ç–∏
      const webAppUrl = `${this.configService.get<string>("WEBAPP_URL")}${chatId}`;

      const settingsKeyboard = {
        inline_keyboard: [
          [
            {
              text: "‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
              web_app: { url: webAppUrl },
            },
          ],
        ],
      };

      await this.telegramService.sendMessageWithKeyboard(chatId, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞:", settingsKeyboard);
    } catch (error) {
      console.error("Error in settings command:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  private async getUserSettings(chatId: string) {
    return await this.prisma.user.findFirstOrThrow({
      where: { telegram_id: chatId },
      include: { voiceSettings: true },
    });
  }
}
